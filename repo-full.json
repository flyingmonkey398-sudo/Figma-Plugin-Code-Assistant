{
  "name": "Figma-Plugin-Code-Assistant",
  "type": "folder",
  "children": [
    {
      "name": ".DS_Store",
      "type": "file",
      "content": null
    },
    {
      "name": ".gitignore",
      "type": "file",
      "content": null
    },
    {
      "name": "README.md",
      "type": "file",
      "content": "1) npm i\n2) npm run build   # emits code.js\n3) Figma → Plugins → Development → New Plugin… → \"Link existing manifest.json\"\n4) Open any file, select frames (optional), run the plugin.\n5) It will auto-scan selection (or page), show JSON, and let you Copy.\n"
    },
    {
      "name": "data",
      "type": "folder",
      "children": [
        {
          "name": "screens.json",
          "type": "file",
          "content": "{\n  \"name\": \"Design Scanner + LLM\",\n  \"id\": \"com.yourname.designscanner\",\n  \"api\": \"1.0.0\",\n  \"main\": \"dist/code.js\",\n  \"ui\": \"dist/ui.html\",\n  \"editorType\": [\"figma\"],\n  \"networkAccess\": {\n    \"allowedDomains\": [\"none\"],\n    \"devAllowedDomains\": [\"http://localhost:8787\"],\n    \"reasoning\": \"Use a local CORS proxy during development to reach a local LLM (LM Studio).\"\n  }\n}\n"
        },
        {
          "name": "tokens.json",
          "type": "file",
          "content": "{\n  \"name\": \"Design Scanner + LLM\",\n  \"id\": \"com.yourname.designscanner\",\n  \"api\": \"1.0.0\",\n  \"main\": \"dist/code.js\",\n  \"ui\": \"dist/ui.html\",\n  \"editorType\": [\"figma\"],\n  \"networkAccess\": {\n    \"allowedDomains\": [\"none\"],\n    \"devAllowedDomains\": [\"http://localhost:8787\"],\n    \"reasoning\": \"Use a local CORS proxy during development to reach a local LLM (LM Studio).\"\n  }\n}\n"
        }
      ]
    },
    {
      "name": "index.mjs",
      "type": "file",
      "content": "// index.mjs — Minimal MCP client for Figma Desktop (Node ≥18)\n// No deps. Works with “session-required” and “auto-init” builds.\n\nconst BASE = process.env.FIGMA_MCP_URL || \"http://127.0.0.1:3845/mcp\";\n\nconst headersJSON = {\n    \"Accept\": \"application/json, text/event-stream\",\n    \"Content-Type\": \"application/json\"\n};\n\nasync function tryInitialize() {\n    // Some builds are very picky about the init shape/headers.\n    // We'll try 5 variants: minimal, clientInfo, clientName, SSE-without-body, and header-based.\n    const variants = [\n        // V1: minimal JSON-RPC (no params)\n        {\n            body: { jsonrpc:\"2.0\", id:\"init-1\", method:\"initialize\" },\n            headers: { \"Accept\":\"application/json, text/event-stream\", \"Content-Type\":\"application/json\" }\n        },\n        // V2: clientInfo + protocolVersion\n        {\n            body: { jsonrpc:\"2.0\", id:\"init-2\", method:\"initialize\",\n                params:{ clientInfo:{ name:\"NodeClient\", version:\"1.0.0\" }, protocolVersion:\"2024-11-05\", capabilities:{} } },\n            headers: { \"Accept\":\"application/json, text/event-stream\", \"Content-Type\":\"application/json\" }\n        },\n        // V3: clientName/clientVersion\n        {\n            body: { jsonrpc:\"2.0\", id:\"init-3\", method:\"initialize\",\n                params:{ clientName:\"NodeClient\", clientVersion:\"1.0.0\" } },\n            headers: { \"Accept\":\"application/json, text/event-stream\", \"Content-Type\":\"application/json\" }\n        },\n        // V4: POST with NO BODY, SSE accept (some builds create session and return mcp-session-id)\n        {\n            raw: true,\n            headers: { \"Accept\":\"text/event-stream\" }  // no Content-Type, no body\n        },\n        // V5: header-declared protocol version + empty JSON body\n        {\n            body: { jsonrpc:\"2.0\", id:\"init-5\", method:\"initialize\" },\n            headers: { \"Accept\":\"application/json, text/event-stream\", \"Content-Type\":\"application/json\", \"MCP-Protocol-Version\":\"2024-11-05\" }\n        }\n    ];\n\n    for (const v of variants) {\n        try {\n            const res = await fetch(BASE, {\n                method: \"POST\",\n                headers: v.headers,\n                body: v.raw ? undefined : JSON.stringify(v.body)\n            });\n\n            const lower = {};\n            for (const [k, val] of res.headers) lower[k.toLowerCase()] = val;\n\n            let sid = lower[\"mcp-session-id\"] || lower[\"x-session-id\"] || null;\n            let json = null;\n            if (res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n                try { json = await res.json(); } catch {}\n            }\n\n            if (!sid && json) sid = json?.result?.sessionId || json?.sessionId || null;\n\n            if (res.ok && sid) {\n                log(`✅ initialize OK — sessionId: ${sid}`);\n                return sid;\n            } else {\n                const msg = json?.error?.message || res.statusText;\n                log(`init variant failed (${res.status}) with headers ${JSON.stringify(lower)}: ${msg}`);\n            }\n        } catch (e) {\n            log(`init variant threw: ${e?.message || e}`);\n        }\n    }\n    return null;\n}\n\n\nasync function openStream(sessionId) {\n    const candidates = [\n        // 1) GET /mcp with header\n        { method: \"GET\", path: \"/mcp\", headers: (sid) => ({ \"Accept\": \"text/event-stream\", \"Cache-Control\": \"no-cache\", ...(sid ? { \"X-Session-Id\": sid } : {}) }) },\n        // 2) GET /mcp?sessionId=...\n        { method: \"GET\", path: (sid) => `/mcp${sid ? `?sessionId=${encodeURIComponent(sid)}` : \"\"}`, headers: () => ({ \"Accept\": \"text/event-stream\", \"Cache-Control\": \"no-cache\" }) },\n        // 3) GET /mcp/stream with header\n        { method: \"GET\", path: \"/mcp/stream\", headers: (sid) => ({ \"Accept\": \"text/event-stream\", \"Cache-Control\": \"no-cache\", ...(sid ? { \"X-Session-Id\": sid } : {}) }) },\n        // 4) GET /mcp/stream?sessionId=...\n        { method: \"GET\", path: (sid) => `/mcp/stream${sid ? `?sessionId=${encodeURIComponent(sid)}` : \"\"}`, headers: () => ({ \"Accept\": \"text/event-stream\", \"Cache-Control\": \"no-cache\" }) },\n        // 5) POST /mcp (some builds open SSE on POST)\n        { method: \"POST\", path: \"/mcp\", headers: () => ({ \"Accept\": \"text/event-stream\" }), body: \"\" },\n    ];\n\n    for (const c of candidates) {\n        try {\n            const url = new URL(typeof c.path === \"function\" ? c.path(sessionId) : c.path, BASE);\n            const res = await fetch(url, {\n                method: c.method,\n                headers: c.headers(sessionId),\n                body: c.body ?? undefined\n            });\n\n            if (!res.ok) {\n                const text = await res.text().catch(() => \"\");\n                console.log(`stream candidate ${c.method} ${url.pathname}${url.search} → ${res.status}`, text.slice(0, 200));\n                continue; // try next\n            }\n\n            const lower = {};\n            for (const [k, v] of res.headers) lower[k.toLowerCase()] = v;\n            const sid = lower[\"mcp-session-id\"] || sessionId || null;\n\n            console.log(`📡 stream open (HTTP ${res.status}) via ${c.method} ${url.pathname}${url.search} — sessionId: ${sid || \"n/a\"}`);\n            readEventStream(res.body);\n            return sid;\n        } catch (e) {\n            console.log(\"stream candidate error:\", e?.message || e);\n        }\n    }\n\n    throw new Error(\"No stream endpoint accepted the session. Server may require an IDE MCP client.\");\n}\n\n\nasync function rpc(sessionId, method, params = {}, id = randomId()) {\n    const body = {\n        jsonrpc: \"2.0\",\n        id,\n        method,\n        params: { sessionId, ...(params || {}) }\n    };\n\n    const res = await fetch(BASE, {\n        method: \"POST\",\n        headers: {\n            \"Accept\": \"application/json, text/event-stream\",\n            \"Content-Type\": \"application/json\",\n            // 👇 some builds REJECT calls unless the session is also in a header\n            ...(sessionId ? { \"X-Session-Id\": sessionId } : {}),\n            \"MCP-Protocol-Version\": \"2024-11-05\"\n        },\n        body: JSON.stringify(body)\n    });\n\n    const text = await res.text();\n    try { return JSON.parse(text); } catch { return { status: res.status, body: text }; }\n}\n\n\n// --- SSE reader (simple) ---\nasync function readEventStream(readable) {\n    const decoder = new TextDecoder();\n    const reader = readable.getReader();\n    let buf = \"\";\n    (async () => {\n        for (;;) {\n            const { done, value } = await reader.read();\n            if (done) { log(\"🔌 stream ended\"); break; }\n            buf += decoder.decode(value, { stream: true });\n            let idx;\n            while ((idx = buf.indexOf(\"\\n\\n\")) >= 0) {\n                const chunk = buf.slice(0, idx);\n                buf = buf.slice(idx + 2);\n                handleEventChunk(chunk);\n            }\n        }\n    })().catch(e => log(\"stream error:\", e?.message || e));\n}\n\nfunction handleEventChunk(chunk) {\n    // Basic SSE format: lines starting with \"event:\" and \"data:\"\n    const lines = chunk.split(/\\r?\\n/);\n    let event = \"message\";\n    let data = \"\";\n    for (const line of lines) {\n        if (line.startsWith(\"event:\")) event = line.slice(6).trim();\n        else if (line.startsWith(\"data:\")) data += line.slice(5).trim();\n    }\n    if (!data) return;\n    try {\n        const obj = JSON.parse(data);\n        log(`📥 [${event}]`, obj);\n    } catch {\n        log(`📥 [${event}]`, data);\n    }\n}\n\n// --- tiny REPL to send calls ---\nimport readline from \"node:readline/promises\";\nimport { stdin as input, stdout as output } from \"node:process\";\n\nfunction log(...args) { console.log(...args); }\n\nfunction randomId() {\n    return Math.random().toString(16).slice(2);\n}\n\nasync function main() {\n    log(`🔗 Figma MCP URL: ${BASE}`);\n\n    // Strategy:\n    // 1) Try initialize to get session.\n    // 2) If that fails, try opening SSE without it to see if server auto-assigns (some builds do).\n    // 3) If that 400s, bail with a clear error message.\n    let sessionId = await tryInitialize();\n\n    if (!sessionId) {\n        console.log(\"No session from initialize; trying stream-less RPC (replies will come on the POST).\");\n    } else {\n        try {\n            await openStream(sessionId);\n        } catch (e) {\n            console.log(\"⚠️ Stream couldn’t open:\", e.message);\n            console.log(\"→ Fallback: you can still type RPCs; responses will print below.\");\n        }\n    }\n\n\n    if (!sessionId) {\n        log(\"⚠️ No session id exposed by headers; RPC may still work if the server bound the stream implicitly.\");\n    } else {\n        log(\"✅ Ready. Type commands (e.g. `tools/list`, `resources/list`, `prompts/list`).\");\n    }\n\n    const rl = readline.createInterface({ input, output });\n    for (;;) {\n        const line = (await rl.question(\"> \")).trim();\n        if (!line) continue;\n        if (line === \"exit\" || line === \"quit\") break;\n\n        // parse: method [JSON params]\n        // example: tools/list\n        // example: resources/get {\"uri\":\"figma://file/...\"}\n        let method = line;\n        let params = {};\n        const space = line.indexOf(\" \");\n        if (space > 0) {\n            method = line.slice(0, space).trim();\n            const p = line.slice(space + 1).trim();\n            if (p) {\n                try { params = JSON.parse(p); }\n                catch { log(\"⚠️ params must be valid JSON\"); continue; }\n            }\n        }\n        try {\n            const res = await rpc(sessionId, method, params);\n            log(\"📤 RPC result:\", res);\n        } catch (e) {\n            log(\"❌ RPC error:\", e?.message || e);\n        }\n    }\n\n    log(\"bye!\");\n    process.exit(0);\n}\n\nmain().catch(e => {\n    console.error(\"fatal:\", e);\n    process.exit(1);\n});\n"
    },
    {
      "name": "manifest.json",
      "type": "file",
      "content": "{\n  \"name\": \"DesignOps Assistant (Dev)\",\n  \"id\": \"designops-assistant-dev\",\n  \"api\": \"1.0.0\",\n  \"editorType\": [\"figma\"],\n  \"main\": \"dist/code.js\",\n  \"ui\": \"dist/ui.html\"\n}\n"
    },
    {
      "name": "package-lock.json",
      "type": "file",
      "content": "{\n  \"name\": \"figma-design-scanner\",\n  \"version\": \"0.1.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"figma-design-scanner\",\n      \"version\": \"0.1.0\",\n      \"devDependencies\": {\n        \"@figma/plugin-typings\": \"^1.88.0\",\n        \"esbuild\": \"^0.21.5\",\n        \"typescript\": \"^5.5.4\"\n      }\n    },\n    \"node_modules/@esbuild/aix-ppc64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz\",\n      \"integrity\": \"sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"aix\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-arm\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz\",\n      \"integrity\": \"sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-arm64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz\",\n      \"integrity\": \"sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-arm64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz\",\n      \"integrity\": \"sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-arm64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz\",\n      \"integrity\": \"sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz\",\n      \"integrity\": \"sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz\",\n      \"integrity\": \"sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ia32\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz\",\n      \"integrity\": \"sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-loong64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz\",\n      \"integrity\": \"sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==\",\n      \"cpu\": [\n        \"loong64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-mips64el\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz\",\n      \"integrity\": \"sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==\",\n      \"cpu\": [\n        \"mips64el\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ppc64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz\",\n      \"integrity\": \"sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-riscv64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz\",\n      \"integrity\": \"sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==\",\n      \"cpu\": [\n        \"riscv64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-s390x\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz\",\n      \"integrity\": \"sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==\",\n      \"cpu\": [\n        \"s390x\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/netbsd-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"netbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/openbsd-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"openbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/sunos-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"sunos\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-arm64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz\",\n      \"integrity\": \"sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-ia32\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz\",\n      \"integrity\": \"sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-x64\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz\",\n      \"integrity\": \"sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@figma/plugin-typings\": {\n      \"version\": \"1.117.1\",\n      \"resolved\": \"https://registry.npmjs.org/@figma/plugin-typings/-/plugin-typings-1.117.1.tgz\",\n      \"integrity\": \"sha512-YrPuZhXDH6naMxQrdrf4+E6aSstkkvv7pVHl9VTeoqkFTGptqw9BbhMSb7jPnT9+elLsRdZVKvWMwcBlyB3OhQ==\",\n      \"dev\": true,\n      \"license\": \"MIT License\"\n    },\n    \"node_modules/esbuild\": {\n      \"version\": \"0.21.5\",\n      \"resolved\": \"https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz\",\n      \"integrity\": \"sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"esbuild\": \"bin/esbuild\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"optionalDependencies\": {\n        \"@esbuild/aix-ppc64\": \"0.21.5\",\n        \"@esbuild/android-arm\": \"0.21.5\",\n        \"@esbuild/android-arm64\": \"0.21.5\",\n        \"@esbuild/android-x64\": \"0.21.5\",\n        \"@esbuild/darwin-arm64\": \"0.21.5\",\n        \"@esbuild/darwin-x64\": \"0.21.5\",\n        \"@esbuild/freebsd-arm64\": \"0.21.5\",\n        \"@esbuild/freebsd-x64\": \"0.21.5\",\n        \"@esbuild/linux-arm\": \"0.21.5\",\n        \"@esbuild/linux-arm64\": \"0.21.5\",\n        \"@esbuild/linux-ia32\": \"0.21.5\",\n        \"@esbuild/linux-loong64\": \"0.21.5\",\n        \"@esbuild/linux-mips64el\": \"0.21.5\",\n        \"@esbuild/linux-ppc64\": \"0.21.5\",\n        \"@esbuild/linux-riscv64\": \"0.21.5\",\n        \"@esbuild/linux-s390x\": \"0.21.5\",\n        \"@esbuild/linux-x64\": \"0.21.5\",\n        \"@esbuild/netbsd-x64\": \"0.21.5\",\n        \"@esbuild/openbsd-x64\": \"0.21.5\",\n        \"@esbuild/sunos-x64\": \"0.21.5\",\n        \"@esbuild/win32-arm64\": \"0.21.5\",\n        \"@esbuild/win32-ia32\": \"0.21.5\",\n        \"@esbuild/win32-x64\": \"0.21.5\"\n      }\n    },\n    \"node_modules/typescript\": {\n      \"version\": \"5.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz\",\n      \"integrity\": \"sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==\",\n      \"dev\": true,\n      \"license\": \"Apache-2.0\",\n      \"bin\": {\n        \"tsc\": \"bin/tsc\",\n        \"tsserver\": \"bin/tsserver\"\n      },\n      \"engines\": {\n        \"node\": \">=14.17\"\n      }\n    }\n  }\n}\n"
    },
    {
      "name": "package.json",
      "type": "file",
      "content": "{\n  \"name\": \"figma-design-scanner\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n  \"build\": \"esbuild src/main.ts --bundle --outfile=dist/code.js --platform=node --format=cjs --target=es2019 --loader:.json=json && esbuild src/ui.ts --bundle --outfile=dist/ui.js --platform=browser --target=es2019 && node -e \\\"const fs=require('fs');fs.mkdirSync('dist',{recursive:true});fs.copyFileSync('src/ui.html','dist/ui.html');console.log('copied src/ui.html → dist/ui.html');\\\"\",\n  \"watch\": \"npm run build -- --watch\",\n  \"typecheck\": \"tsc --noEmit\"\n  },\n  \"devDependencies\": {\n    \"@figma/plugin-typings\": \"^1.88.0\",\n    \"esbuild\": \"^0.21.5\",\n    \"typescript\": \"^5.5.4\"\n  }\n}\n"
    },
    {
      "name": "src",
      "type": "folder",
      "children": [
        {
          "name": ".DS_Store",
          "type": "file",
          "content": null
        },
        {
          "name": "core",
          "type": "folder",
          "children": [
            {
              "name": "export.ts",
              "type": "file",
              "content": "type ExportOptions = {\n    onlyFrames?: boolean;     // default true: export frames only\n    maxChildren?: number;     // per node\n    maxDepth?: number;        // nesting depth\n    includePrototype?: boolean;\n    includeTextContent?: boolean;\n    includeBindings?: boolean; // variable bindings\n};\n\nexport function exportVariablesJSON() {\n    const result: any = { collections: [] };\n    const collections = figma.variables.getLocalVariableCollections();\n    const allVars = figma.variables.getLocalVariables();\n\n    for (const coll of collections) {\n        const entry: any = {\n            id: coll.id,\n            name: coll.name,\n            modes: coll.modes.map(m => ({ id: m.modeId, name: m.name })),\n            variables: []\n        };\n        for (const v of allVars) {\n            if (v.variableCollectionId !== coll.id) continue;\n            const perMode: Record<string, any> = {};\n            for (const m of coll.modes) {\n                const val = v.valuesByMode?.[m.modeId];\n                if (val !== undefined) perMode[m.name] = normalizeValue(v.resolvedType, val);\n            }\n            entry.variables.push({\n                id: v.id, name: v.name, type: v.resolvedType, valuesByMode: perMode\n            });\n        }\n        result.collections.push(entry);\n    }\n    return result;\n}\n\nexport function exportSelectionJSON(opts?: Partial<ExportOptions>) {\n    const options = withDefaults(opts);\n    const sel = figma.currentPage.selection.filter(n => filterNode(n, options));\n    return sel.map(n => serializeNode(n as SceneNode, options, 0));\n}\n\nexport function exportDocumentJSON(opts?: Partial<ExportOptions>) {\n    const options = withDefaults(opts);\n    const frames = figma.currentPage\n        .findAll(n => filterNode(n, options)) as SceneNode[];\n    return frames.map(n => serializeNode(n, options, 0));\n}\n\n// ---------- helpers ----------\n\nfunction withDefaults(opts?: Partial<ExportOptions>): Required<ExportOptions> {\n    return {\n        onlyFrames: opts?.onlyFrames ?? true,\n        maxChildren: Math.max(0, opts?.maxChildren ?? 200),\n        maxDepth: Math.max(0, opts?.maxDepth ?? 3),\n        includePrototype: opts?.includePrototype ?? true,\n        includeTextContent: opts?.includeTextContent ?? true,\n        includeBindings: opts?.includeBindings ?? true,\n    };\n}\n\nfunction filterNode(n: BaseNode, options: Required<ExportOptions>) {\n    if (n.type === \"PAGE\") return false;\n    if (!(\"visible\" in n) || !(n as any).visible) return false;\n    if (!options.onlyFrames) return \"type\" in n;\n    return n.type === \"FRAME\" || n.type === \"COMPONENT\" || n.type === \"INSTANCE\";\n}\n\nfunction serializeNode(n: SceneNode, options: Required<ExportOptions>, depth: number): any {\n    const base: any = {\n        id: n.id,\n        name: n.name,\n        type: n.type,\n        x: \"x\" in n ? (n as any).x : undefined,\n        y: \"y\" in n ? (n as any).y : undefined,\n        width: \"width\" in n ? (n as any).width : undefined,\n        height: \"height\" in n ? (n as any).height : undefined,\n        rotation: \"rotation\" in n ? (n as any).rotation : undefined,\n        layout: pickLayout(n),\n        fills: pickPaints((n as any).fills),\n        strokes: pickPaints((n as any).strokes),\n        effects: pickEffects((n as any).effects),\n        cornerRadius: (n as any).cornerRadius,\n        constraints: (n as any).constraints,\n        opacity: (n as any).opacity,\n        visible: (n as any).visible,\n        locked: (n as any).locked,\n    };\n\n    if (options.includeBindings) base.bindings = pickBindings(n);\n    if (options.includeTextContent && n.type === \"TEXT\") base.characters = (n as TextNode).characters;\n    if (options.includePrototype) base.prototype = pickPrototype(n);\n\n    if (\"children\" in n && depth < options.maxDepth) {\n        const kids = (n as any).children as ReadonlyArray<SceneNode>;\n        base.children = [];\n        let count = 0;\n        for (const c of kids) {\n            if (!(\"visible\" in c) || !(c as any).visible) continue;\n            base.children.push(serializeNode(c, options, depth + 1));\n            if (++count >= options.maxChildren) { base.truncated = true; break; }\n        }\n    }\n    return compact(base);\n}\n\nfunction pickLayout(n: SceneNode) {\n    const k: any = {};\n    if (\"layoutMode\" in n) {\n        k.layoutMode = (n as any).layoutMode; // VERTICAL | HORIZONTAL | NONE\n        k.primaryAxisSizingMode = (n as any).primaryAxisSizingMode;\n        k.counterAxisSizingMode = (n as any).counterAxisSizingMode;\n        k.itemSpacing = (n as any).itemSpacing;\n        k.padding = {\n            top: (n as any).paddingTop,\n            right: (n as any).paddingRight,\n            bottom: (n as any).paddingBottom,\n            left: (n as any).paddingLeft\n        };\n        k.counterAxisAlignItems = (n as any).counterAxisAlignItems;\n        k.primaryAxisAlignItems = (n as any).primaryAxisAlignItems;\n    }\n    if (\"layoutGrids\" in n) k.layoutGrids = (n as any).layoutGrids;\n    return compact(k);\n}\n\nfunction pickPaints(paints: Paint[] | PluginAPI[\"mixed\"]) {\n    if (!paints || paints === figma.mixed) return undefined;\n    return (paints as Paint[]).map(p => {\n        if (p.type === \"SOLID\") {\n            const s = p as SolidPaint;\n            const colorHex = rgbToHex(s.color);\n            const bound = (s as any).boundVariables?.color;\n            return compact({ type: \"SOLID\", hex: colorHex, opacity: s.opacity, variableId: bound });\n        }\n        if (p.type === \"GRADIENT_LINEAR\" || p.type === \"GRADIENT_RADIAL\") {\n            return { type: p.type, gradientStops: (p as any).gradientStops?.length };\n        }\n        return { type: p.type };\n    });\n}\n\nfunction pickEffects(effects: readonly Effect[] | PluginAPI[\"mixed\"]) {\n    if (!effects || effects === figma.mixed) return undefined;\n    return effects.map(e => ({ type: e.type, radius: (e as any).radius, spread: (e as any).spread }));\n}\n\nfunction pickBindings(n: SceneNode) {\n    const binds: any = {};\n    if (\"boundVariables\" in n) binds.node = (n as any).boundVariables ?? undefined;\n    // text fills often carry boundVariables in fills; we already expose per paint above\n    return compact(binds);\n}\n\nfunction pickPrototype(n: SceneNode) {\n    const p: any = {};\n    // limited snapshot to avoid heavy graphs\n    if (\"flowStartingPoints\" in figma.currentPage && figma.currentPage.flowStartingPoints) {\n        // page-level; leave out\n    }\n    // Node-level interactions\n    // @ts-ignore access safely\n    const interactions = (n as any).reactions || (n as any).prototypeDevice; // reactions is the main one\n    if (interactions) p.reactions = interactions;\n    return compact(p);\n}\n\nfunction rgbToHex(c: RGB) {\n    const r = Math.round((c.r ?? 0) * 255);\n    const g = Math.round((c.g ?? 0) * 255);\n    const b = Math.round((c.b ?? 0) * 255);\n    return \"#\" + [r,g,b].map(x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nfunction normalizeValue(type: VariableResolvedDataType, val: any) {\n    if (type === \"COLOR\" && val && typeof val === \"object\" && \"r\" in val) return rgbToHex(val as RGB);\n    return val;\n}\n\nfunction compact<T extends object>(o: T): T {\n    const out: any = {};\n    for (const k in o) if ((o as any)[k] !== undefined) out[k] = (o as any)[k];\n    return out;\n}\n"
            }
          ]
        },
        {
          "name": "main.ts",
          "type": "file",
          "content": "import { exportVariablesJSON, exportSelectionJSON, exportDocumentJSON } from \"./core/export\";\n\nfigma.showUI(__html__, { width: 820, height: 520 });\n\nfigma.ui.onmessage = async (msg: any) => {\n    try {\n        if (msg.type === \"sync-tokens\") {\n            // TODO: call your existing sync\n            figma.notify(\"✅ Tokens synced\");\n            figma.ui.postMessage({ type: \"notify\", text: \"Tokens synced\" });\n            return;\n        }\n\n        if (msg.type === \"generate-screens\") {\n            // TODO: call your generate\n            figma.notify(\"🧱 Screens generated\");\n            figma.ui.postMessage({ type: \"notify\", text: \"Screens generated\" });\n            return;\n        }\n\n        if (msg.type === \"update-screens\") {\n            // TODO: call your update\n            figma.notify(\"♻️ Screens updated\");\n            figma.ui.postMessage({ type: \"notify\", text: \"Screens updated\" });\n            return;\n        }\n\n        if (msg.type === \"export-variables\") {\n            const data = exportVariablesJSON();\n            figma.ui.postMessage({ type: \"export-result\", payload: data });\n            figma.notify(\"📤 Variables exported\");\n            return;\n        }\n\n        if (msg.type === \"export-selection\") {\n            const data = exportSelectionJSON({ onlyFrames: true, maxDepth: 3 });\n            figma.ui.postMessage({ type: \"export-result\", payload: data });\n            figma.notify(\"📤 Selection exported\");\n            return;\n        }\n\n        if (msg.type === \"export-document\") {\n            const data = exportDocumentJSON({ onlyFrames: true, maxDepth: 2, maxChildren: 300 });\n            figma.ui.postMessage({ type: \"export-result\", payload: data });\n            figma.notify(\"📤 Document exported\");\n            return;\n        }\n    } catch (e: any) {\n        figma.notify(`⚠️ ${e?.message || e}`);\n        figma.ui.postMessage({ type: \"notify\", text: `Error: ${e?.message || e}` });\n    }\n};\n"
        },
        {
          "name": "ui.html ",
          "type": "file",
          "content": null
        },
        {
          "name": "ui.ts",
          "type": "file",
          "content": "const send = (msg: any) => parent.postMessage({ pluginMessage: msg }, \"*\");\nconst out = document.getElementById(\"out\") as HTMLTextAreaElement;\nconst statusEl = document.getElementById(\"status\")!;\n\nfunction setStatus(s: string) { statusEl.textContent = s; }\n\n(document.getElementById(\"syncTokens\")!).onclick = () => send({ type: \"sync-tokens\" });\n(document.getElementById(\"genScreens\")!).onclick   = () => send({ type: \"generate-screens\" });\n(document.getElementById(\"updateScreens\")!).onclick= () => send({ type: \"update-screens\" });\n\n(document.getElementById(\"exportVars\")!).onclick      = () => { setStatus(\"Exporting variables…\");  send({ type: \"export-variables\" }); };\n(document.getElementById(\"exportSelection\")!).onclick = () => { setStatus(\"Exporting selection…\");  send({ type: \"export-selection\" }); };\n(document.getElementById(\"exportDoc\")!).onclick       = () => { setStatus(\"Exporting document…\");   send({ type: \"export-document\"  }); };\n\nwindow.onmessage = (e) => {\n    const msg = e.data?.pluginMessage;\n    if (!msg) return;\n    if (msg.type === \"export-result\") {\n        out.value = JSON.stringify(msg.payload, null, 2);\n        setStatus(\"Ready\");\n    }\n    if (msg.type === \"notify\") setStatus(msg.text || \"Ready\");\n};\n"
        }
      ]
    },
    {
      "name": "tsconfig.json",
      "type": "file",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"es2019\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"lib\": [\"es2020\", \"dom\"],\n    \"types\": [\"@figma/plugin-typings\"]\n  },\n  \"include\": [\"src/**/*\"],\n\n  \"moduleResolution\": \"node\",\n  \"resolveJsonModule\": true\n}\n"
    }
  ]
}